<launch>
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
            <arg name="verbose" value="true" />
        </include>
    <group ns="mycobot_320">
        <!--空のワールドでGazeboを開始する-->
        <arg name="model" default="$(find mycobot_320_moveit)/urdf/mycobot_320.urdf.xacro" />
        <param name="robot_description" command="$(find xacro)/xacro $(arg model)" />
        <!--GazeboでMyCobotを生成し，パラメータサーバからのその記述を受ける-->
        <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model"
            args="-param /mycobot_320/robot_description -urdf -model mycobot_320" />
        <include file="$(find mycobot_320_moveit)/launch/move_group.launch">
            <arg name="allow_trajectory_execution" value="true" />
            <arg name="info" value="true" />
            <arg name="debug" value="false" />
        </include>
        <!--コントローラをROSのパラメータサーバに読み込む-->
        <rosparam file="$(find mycobot_320_moveit)/yaml/mycobot_moveit_controllers.yaml" command="load" />
        <rosparam file="$(find mycobot_320_moveit)/yaml/joint_state_controller.yaml" command="load" />

        <!--コントローラ作成-->
        <node name="controller_spawner" pkg="controller_manager" type="spawner"
            args="arm_controller
        joint_state_controller" />

        <!--robot_state_publisher:
        順運動学を計算し，tfメッセージを生成する-->
        <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />
        <node name="rviz" pkg="rviz" type="rviz" args="-d $(find mycobot_320_moveit)/config/moveit_rviz.rviz"
        />
    </group>

</launch>